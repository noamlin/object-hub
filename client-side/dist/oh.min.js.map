{"version":3,"sources":["../../node_modules/proxserve/general-functions.js","functions.js","oh.js"],"names":["realtypeof","variable","rawType","Object","prototype","toString","call","substring","length","simpleCloneSet","WeakSet","simpleClone","obj","typeofobj","cloned","add","keys","key","has","i","console","warn","splitPath","path","resultsArr","tmp","char","push","evalPath","object","property","undefined","value","segments","Error","validChangeTypes","areValidChanges","changes","Array","isArray","change","includes","type","hasOwnProperty","isObject","simpleDeepEqual","obj1","obj2","keys1","keys2","xorChanges","matchAgainst","uniqueChanges","slice","changesLoop","againstChange","j","splice","OH_DEBUG","OH","domain","afterInitCallback","clientData","proxserveOptions","id","initiated","changesQueue","client","server","delay","strict","emitReference","socket","io","autoConnect","reconnection","query","data","JSON","stringify","on","Proxserve","onObjectChange","bind","updateObject","parts","currObj","shift","error","reason","concat","emit","module","exports"],"mappings":"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","file":"oh.min.js","sourceRoot":"../src","sourcesContent":["/**\n * Copyright 2020 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\n/**\n * return a string representing the full type of the variable\n * @param {*} variable \n * @returns {String} - Object, Array, Number, String, Boolean, Null, Undefined, BigInt, Symbol, Date ...\n */\nexport function realtypeof(variable) {\n\tlet rawType = Object.prototype.toString.call(variable); //[object Object], [object Array], [object Number] ...\n\treturn rawType.substring(8, rawType.length - 1);\n}\n\n/**\n * recursively clones objects and array\n * @param {Proxy|Object|Array} proxy \n */\nlet simpleCloneSet = new WeakSet();\nexport function simpleClone(obj) {\n\tlet typeofobj = realtypeof(obj);\n\tlet cloned;\n\tif(typeofobj === 'Object') {\n\t\tsimpleCloneSet.add(obj);\n\t\tcloned = {};\n\t\tlet keys = Object.keys(obj);\n\t\tfor(let key of keys) {\n\t\t\tif(simpleCloneSet.has(obj[key])) {\n\t\t\t\tcloned[key] = obj[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[key] = simpleClone(obj[key]);\n\t\t\t}\n\t\t}\n\t}\n\telse if(typeofobj === 'Array') {\n\t\tsimpleCloneSet.add(obj);\n\t\tcloned = [];\n\t\tfor(let i = 0; i < obj.length; i++) {\n\t\t\tif(simpleCloneSet.has(obj[i])) {\n\t\t\t\tcloned[i] = obj[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[i] = simpleClone(obj[i]);\n\t\t\t}\n\t\t}\n\t}\n\telse { //hopefully a primitive\n\t\tcloned = obj;\n\n\t\tif(typeofobj !== 'Undefined' && typeofobj !== 'Null' && typeofobj !== 'Boolean' && typeofobj !== 'Number'\n\t\t&& typeofobj !== 'BigInt' && typeofobj !== 'String') {\n\t\t\tconsole.warn(`Can't clone a variable of type ${typeofobj}`);\n\t\t}\n\t}\n\n\treturn cloned;\n}\n\n/**\n * splits a path to an array of properties\n * (benchmarked and is faster than regex and split())\n * @param {String} path \n */\nexport function splitPath(path) {\n\tif(typeof path !== 'string' || path === '') {\n\t\treturn [];\n\t}\n\t\n\tlet i = 0;\n\tif(path[0] === '.' || path[0] === '[') {\n\t\ti = 1; //loop will skip over openning '.' or '['\n\t}\n\n\tvar resultsArr = [];\n\tvar tmp='';\n\tfor(; i < path.length; i++) {\n\t\tlet char = path[i];\n\t\tif(char === '.' || char === '[') {\n\t\t\tresultsArr.push(tmp);\n\t\t\ttmp = '';\n\t\t} else if(char !== ']') {\n\t\t\ttmp += char;\n\t\t}\n\t}\n\tif(tmp!=='') {\n\t\tresultsArr.push(tmp);\n\t}\n\treturn resultsArr;\n}\n\n/**\n * evaluate a long path and return the designated object and its referred property\n * @param {Object} obj\n * @param {String} path\n * @returns {Object} - returns {object, property, value}\n */\nexport function evalPath(obj, path) {\n\tif(path === '') {\n\t\treturn { object: obj, property: undefined, value: obj };\n\t}\n\n\tlet segments = splitPath(path);\n\tlet i;\n\tfor(i = 0; i <= segments.length - 2; i++) { //iterate until one before last property because they all must exist\n\t\tobj = obj[segments[i]];\n\t\tif(typeof obj === 'undefined') {\n\t\t\tthrow new Error(`Invalid path was given - \"${path}\"`);\n\t\t}\n\t}\n\treturn { object: obj, property: segments[i], value: obj[ segments[i] ] };\n}","/**\n * Copyright 2020 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nvar validChangeTypes = ['create','update','delete'];\n\n/**\n * check if received changes is a valid array of changes\n * @param {Array.<Change>} changes \n */\nexport function areValidChanges(changes) {\n\tif(!Array.isArray(changes) || changes.length === 0) {\n\t\treturn false;\n\t}\n\n\tfor(let change of changes) {\n\t\tif(typeof change.path !== 'string'\n\t\t|| !validChangeTypes.includes(change.type)\n\t\t|| (!change.hasOwnProperty('value') && change.type !== 'delete') /*create and update must have a 'value' property*/\n\t\t|| (!change.hasOwnProperty('oldValue') && change.type === 'update')) {/*update must have an 'oldValue' property*/\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction isObject(obj) {\n\treturn (obj !== null && typeof obj === 'object');\n}\n\nexport function simpleDeepEqual(obj1, obj2) {\n\tif(obj1 === obj2) return true;\n\n\tif(!isObject(obj1) || !isObject(obj2)) return false;\n\n\tconst keys1 = Object.keys(obj1);\n\tconst keys2 = Object.keys(obj2);\n\n\tif (keys1.length !== keys2.length) {\n\t\treturn false;\n\t}\n\n\tfor(let key of keys1) {\n\t\tlet val1 = obj1[key];\n\t\tlet val2 = obj2[key];\n\n\t\tif(!simpleDeepEqual(val1, val2)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\n/**\n * match changes list against a secondary changes list and returns only the unique changes of the primary list\n * @param {Array.<Change>} changes\n * @param {Array.<Change>} matchAgainst\n */\nexport function xorChanges(changes, matchAgainst) {\n\tlet uniqueChanges = changes.slice();\n\n\tchangesLoop: for(let i = 0; i < matchAgainst.length; i++) {\n\t\tlet againstChange = matchAgainst[i];\n\t\tfor(let j = uniqueChanges.length - 1; j >= 0; j--) {\n\t\t\tlet change = uniqueChanges[j];\n\t\t\tif(change.type === againstChange.type && change.path === againstChange.path /*probably the same change*/\n\t\t\t&& (change.type === 'delete' || simpleDeepEqual(change.value, againstChange.value))) { //both are delete or both change to the same value\n\t\t\t\tuniqueChanges.splice(j, 1);\n\t\t\t\tcontinue changesLoop;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn uniqueChanges;\n}","/**\n * Copyright 2020 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { simpleClone } from '../../node_modules/proxserve/general-functions.js';\nimport { areValidChanges, simpleDeepEqual, xorChanges } from './functions.js';\n\n/**\n * the change object as emitted from Proxserve\n * @typedef {Object} Change - each change emitted from Proxserve\n * @property {String} path - the path from the object listening to the property that changed\n * @property {*} value - the new value that was set\n * @property {*} oldValue - the previous value\n * @property {String} type - the type of change. may be - \"create\"|\"update\"|\"delete\"\n */\n\n//switch for debugging specific behaviors that are not harming or are fixed via one side (client or server)\n//those scripts are too important to delete but the debugging affects performance so it should stay shut down\nlet OH_DEBUG = false;\n\nclass OH {\n\tconstructor(domain, afterInitCallback, clientData = {}, proxserveOptions = {}) {\n\t\tthis.domain = domain;\n\t\tthis.id;\n\t\tthis.initiated = false;\n\t\tthis.changesQueue = {\n\t\t\tclient: [], /*the changes made by the client*/\n\t\t\tserver: [] /*the changes received from the server*/\n\t\t};\n\n\t\tthis.proxserveOptions = {\n\t\t\tdelay: (proxserveOptions.delay !== undefined) ? proxserveOptions.delay : 10,\n\t\t\tstrict: (proxserveOptions.strict !== undefined) ? proxserveOptions.strict : true,\n\t\t\temitReference: (proxserveOptions.emitReference !== undefined) ? proxserveOptions.emitReference : false\n\t\t};\n\t\t\n\t\tthis.socket = io(`/oh-${domain}`, {\n\t\t\tautoConnect: true,\n\t\t\treconnection: true,\n\t\t\tquery: { data: JSON.stringify(clientData) }\n\t\t});\n\n\t\tthis.socket.on('init', (data) => { //gets initiated with data from the server\n\t\t\tthis.id = data.id;\n\t\t\tif(data.obj) {\n\t\t\t\tthis.object = new Proxserve(data.obj, this.proxserveOptions);\n\t\t\t\tthis.object.on('change', this.onObjectChange.bind(this)); //when client alters the object\n\t\t\t\tthis.initiated = true;\n\t\t\t\tif(afterInitCallback) {\n\t\t\t\t\tafterInitCallback(this.object);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.socket.on('change', (changes) => {\n\t\t\tif(this.initiated) {\n\t\t\t\tthis.updateObject(changes);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * changes received from the server\n\t * @param {Array.<Change>} changes \n\t */\n\tupdateObject(changes) {\n\t\tif(areValidChanges(changes)) {\n\t\t\t//prevent infinite loop of:\n\t\t\t//client changes & notify server -> server changes & notify client -> client changes again & notify again..\n\t\t\tlet uniqueChanges = xorChanges(changes, this.changesQueue.client);\n\t\t\tthis.changesQueue.client = []; //check against client-made-changes should happen for only one cycle\n\t\t\tfor(let change of uniqueChanges) {\n\t\t\t\tthis.changesQueue.server.push(change); //save the change - value references might be altered later\n\t\t\t\tlet parts = Proxserve.splitPath(change.path);\n\t\t\t\tlet currObj = this.object;\n\n\t\t\t\twhile(typeof currObj[ parts[0] ] !== 'undefined' && parts.length > 1) {\n\t\t\t\t\tcurrObj = currObj[ parts.shift() ];\n\t\t\t\t}\n\n\t\t\t\tif(parts.length === 1) { //previous loop finished on time\n\t\t\t\t\tswitch(change.type) {\n\t\t\t\t\t\tcase 'create':\n\t\t\t\t\t\tcase 'update':\n\t\t\t\t\t\t\tif(OH_DEBUG && change.type === 'create' && typeof currObj[ parts[0] ] !== 'undefined') {\n\t\t\t\t\t\t\t\tconsole.warn('tried to create a new property but instead updated an existing one:');\n\t\t\t\t\t\t\t\tconsole.warn(change);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(!simpleDeepEqual(currObj[ parts[0] ], change.value)) {\n\t\t\t\t\t\t\t\t//update only if values are completely different. this helps avoid double asigning of new objects.\n\t\t\t\t\t\t\t\t//for example - the client sets a new object {a:1}, then updates the server which in turn updates the\n\t\t\t\t\t\t\t\t//client which will see that the local {a:1} is not the same reference as the server's {a:1}\n\t\t\t\t\t\t\t\tif(typeof change.value !== 'object') {\n\t\t\t\t\t\t\t\t\tcurrObj[ parts[0] ] = change.value;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t//don't point to original 'change.value' so later it will not get altered and then fail on 'xorChanges'\n\t\t\t\t\t\t\t\t\tcurrObj[ parts[0] ] = simpleClone(change.value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'delete':\n\t\t\t\t\t\t\tdelete currObj[ parts[0] ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('couldn\\'t loop completely over path', change);\n\t\t\t\t}\n\n\t\t\t\tif(typeof change.reason === 'string' && change.reason.length >= 1) {\n\t\t\t\t\tconsole.warn(change.path, change.reason);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\tconsole.error('changes received from server are not valid', changes);\n\t\t}\n\t}\n\n\t/**\n\t * changes made by the client\n\t * @param {Array.<Change>} changes \n\t */\n\tonObjectChange(changes) {\n\t\t//work on a copy of 'changes' in order not to change the reference of changes which is also used by client's listeners.\n\t\t//prevent infinite loop of:\n\t\t//server changes & notify client -> client changes & notify server -> server changes again & notify again..\n\t\tlet uniqueChanges = xorChanges(changes, this.changesQueue.server);\n\t\tthis.changesQueue.server = []; //check against server-changes should happen for only one cycle\n\n\t\tif(uniqueChanges.length >= 1) {\n\t\t\tthis.changesQueue.client = this.changesQueue.client.concat(uniqueChanges);\n\t\t\tthis.socket.emit('change', uniqueChanges);\n\t\t}\n\t}\n};\n\nmodule.exports = exports = OH; //makes ParcelJS expose this globally (for all platforms) after bundling everything"]}